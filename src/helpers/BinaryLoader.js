/**
 * @author alteredq / http://alteredqualia.com/
 */

import * as THREE from 'three';

/* eslint-disable no-param-reassign */
export default class BinaryLoader {
  constructor(manager) {
    if (typeof manager === 'boolean') {
      console.warn('THREE.BinaryLoader: showStatus parameter has been removed from constructor.');
      manager = undefined;
    }

    this.manager = (manager !== undefined) ? manager : THREE.DefaultLoadingManager;
  }

  crossOrigin = 'Anonymous';

  // Load models generated by slim OBJ converter with BINARY option (converter_obj_three_slim.py -t binary)
  //  - binary models consist of two files: JS and BIN
  //  - parameters
  //    - url (required)
  //    - callback (required)
  //    - texturePath (optional: if not specified, textures will be assumed to be in the same folder as JS model file)
  //    - binaryPath (optional: if not specified, binary file will be assumed to be in the same folder as JS model file)
  load(url, onLoad, onProgress, onError) {
    // todo: unify load API to for easier SceneLoader use

    const texturePath = this.texturePath || THREE.LoaderUtils.extractUrlBase(url);
    const binaryPath = this.binaryPath || THREE.LoaderUtils.extractUrlBase(url);

    // #1 load JS part via web worker

    const scope = this;

    const jsonloader = new THREE.FileLoader(this.manager);
    jsonloader.load(url, (data) => {
      const json = JSON.parse(data);

      const bufferUrl = binaryPath + json.buffers;

      const bufferLoader = new THREE.FileLoader(scope.manager);
      bufferLoader.setResponseType('arraybuffer');
      bufferLoader.load(bufferUrl, (bufData) => {
        // IEWEBGL needs this ???
        // buffer = ( new Uint8Array( xhr.responseBody ) ).buffer;

        // // iOS and other XMLHttpRequest level 1 ???

        scope.parse(bufData, onLoad, texturePath, json.materials);
      }, onProgress, onError);
    }, onProgress, onError);
  }

  setBinaryPath(value) {
    this.binaryPath = value;
  }

  setCrossOrigin(value) {
    this.crossOrigin = value;
  }

  setTexturePath(value) {
    this.texturePath = value;
  }

  parse(data, callback, texturePath, jsonMaterials) {
    const Model = function () {
      const scope = this;
      let currentOffset = 0;
      let md;
      const normals = [];
      const uvs = [];
      let start_tri_flat;
      let start_tri_smooth;
      let start_tri_flat_uv;
      let start_tri_smooth_uv;
      let start_quad_flat;
      let start_quad_smooth;
      let start_quad_flat_uv;
      let start_quad_smooth_uv;
      let tri_size;
      let quad_size;
      let len_tri_flat;
      let len_tri_smooth;
      let len_tri_flat_uv;
      let len_tri_smooth_uv;
      let len_quad_flat;
      let len_quad_smooth;
      let len_quad_flat_uv;


      THREE.Geometry.call(this);

      md = parseMetaData(data, currentOffset);

      console.log(md);

      currentOffset += md.header_bytes;
      /*
					md.vertex_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
					md.material_index_bytes = Uint16Array.BYTES_PER_ELEMENT;
					md.normal_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
					md.uv_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
			*/
      // buffers sizes

      tri_size = md.vertex_index_bytes * 3 + md.material_index_bytes;
      quad_size = md.vertex_index_bytes * 4 + md.material_index_bytes;

      len_tri_flat = md.ntri_flat * (tri_size);
      len_tri_smooth = md.ntri_smooth * (tri_size + md.normal_index_bytes * 3);
      len_tri_flat_uv = md.ntri_flat_uv * (tri_size + md.uv_index_bytes * 3);
      len_tri_smooth_uv = md.ntri_smooth_uv * (tri_size + md.normal_index_bytes * 3 + md.uv_index_bytes * 3);

      len_quad_flat = md.nquad_flat * (quad_size);
      len_quad_smooth = md.nquad_smooth * (quad_size + md.normal_index_bytes * 4);
      len_quad_flat_uv = md.nquad_flat_uv * (quad_size + md.uv_index_bytes * 4);

      // read buffers

      currentOffset += init_vertices(currentOffset);

      currentOffset += init_normals(currentOffset);
      currentOffset += handlePadding(md.nnormals * 3);

      currentOffset += init_uvs(currentOffset);

      start_tri_flat = currentOffset;
      start_tri_smooth = start_tri_flat + len_tri_flat + handlePadding(md.ntri_flat * 2);
      start_tri_flat_uv = start_tri_smooth + len_tri_smooth + handlePadding(md.ntri_smooth * 2);
      start_tri_smooth_uv = start_tri_flat_uv + len_tri_flat_uv + handlePadding(md.ntri_flat_uv * 2);

      start_quad_flat = start_tri_smooth_uv + len_tri_smooth_uv + handlePadding(md.ntri_smooth_uv * 2);
      start_quad_smooth = start_quad_flat + len_quad_flat	+ handlePadding(md.nquad_flat * 2);
      start_quad_flat_uv = start_quad_smooth + len_quad_smooth + handlePadding(md.nquad_smooth * 2);
      start_quad_smooth_uv = start_quad_flat_uv + len_quad_flat_uv + handlePadding(md.nquad_flat_uv * 2);

      // have to first process faces with uvs
      // so that face and uv indices match

      init_triangles_flat_uv(start_tri_flat_uv);
      init_triangles_smooth_uv(start_tri_smooth_uv);

      init_quads_flat_uv(start_quad_flat_uv);
      init_quads_smooth_uv(start_quad_smooth_uv);

      // now we can process untextured faces

      init_triangles_flat(start_tri_flat);
      init_triangles_smooth(start_tri_smooth);

      init_quads_flat(start_quad_flat);
      init_quads_smooth(start_quad_smooth);

      this.computeFaceNormals();

      function handlePadding(n) {
        return (n % 4) ? (4 - n % 4) : 0;
      }

      function parseMetaData(data, offset) {
        console.log(data);

        const metaData = {

          signature: parseString(data, offset, 12),
          header_bytes: parseUChar8(data, offset + 12),

          vertex_coordinate_bytes: parseUChar8(data, offset + 13),
          normal_coordinate_bytes: parseUChar8(data, offset + 14),
          uv_coordinate_bytes: parseUChar8(data, offset + 15),

          vertex_index_bytes: parseUChar8(data, offset + 16),
          normal_index_bytes: parseUChar8(data, offset + 17),
          uv_index_bytes: parseUChar8(data, offset + 18),
          material_index_bytes: parseUChar8(data, offset + 19),

          nvertices: parseUInt32(data, offset + 20),
          nnormals: parseUInt32(data, offset + 20 + 4 * 1),
          nuvs: parseUInt32(data, offset + 20 + 4 * 2),

          ntri_flat: parseUInt32(data, offset + 20 + 4 * 3),
          ntri_smooth: parseUInt32(data, offset + 20 + 4 * 4),
          ntri_flat_uv: parseUInt32(data, offset + 20 + 4 * 5),
          ntri_smooth_uv: parseUInt32(data, offset + 20 + 4 * 6),

          nquad_flat: parseUInt32(data, offset + 20 + 4 * 7),
          nquad_smooth: parseUInt32(data, offset + 20 + 4 * 8),
          nquad_flat_uv: parseUInt32(data, offset + 20 + 4 * 9),
          nquad_smooth_uv: parseUInt32(data, offset + 20 + 4 * 10),

        };

        return metaData;
      }

      function parseString(data, offset, length) {
        return THREE.LoaderUtils.decodeText(new Uint8Array(data, offset, length));
      }

      function parseUChar8(data, offset) {
        const charArray = new Uint8Array(data, offset, 1);

        return charArray[0];
      }

      function parseUInt32(data, offset) {
        const intArray = new Uint32Array(data, offset, 1);

        return intArray[0];
      }

      function init_vertices(start) {
        console.log(start);

        const nElements = md.nvertices;

        const coordArray = new Float32Array(data, start, nElements * 3);

        let i,
          x,
          y,
          z;

        for (i = 0; i < nElements; i++) {
          x = coordArray[i * 3];
          y = coordArray[i * 3 + 1];
          z = coordArray[i * 3 + 2];

          scope.vertices.push(new THREE.Vector3(x, y, z));
        }

        return nElements * 3 * Float32Array.BYTES_PER_ELEMENT;
      }

      function init_normals(start) {
        const nElements = md.nnormals;

        if (nElements) {
          const normalArray = new Int8Array(data, start, nElements * 3);

          let i,
            x,
            y,
            z;

          for (i = 0; i < nElements; i++) {
            x = normalArray[i * 3];
            y = normalArray[i * 3 + 1];
            z = normalArray[i * 3 + 2];

            normals.push(x / 127, y / 127, z / 127);
          }
        }

        return nElements * 3 * Int8Array.BYTES_PER_ELEMENT;
      }

      function init_uvs(start) {
        const nElements = md.nuvs;

        if (nElements) {
          const uvArray = new Float32Array(data, start, nElements * 2);

          let i,
            u,
            v;

          for (i = 0; i < nElements; i++) {
            u = uvArray[i * 2];
            v = uvArray[i * 2 + 1];

            uvs.push(u, v);
          }
        }

        return nElements * 2 * Float32Array.BYTES_PER_ELEMENT;
      }

      function init_uvs3(nElements, offset) {
        let i,
          uva,
          uvb,
          uvc,
          u1,
          u2,
          u3,
          v1,
          v2,
          v3;

        const uvIndexBuffer = new Uint32Array(data, offset, 3 * nElements);

        for (i = 0; i < nElements; i++) {
          uva = uvIndexBuffer[i * 3];
          uvb = uvIndexBuffer[i * 3 + 1];
          uvc = uvIndexBuffer[i * 3 + 2];

          u1 = uvs[uva * 2];
          v1 = uvs[uva * 2 + 1];

          u2 = uvs[uvb * 2];
          v2 = uvs[uvb * 2 + 1];

          u3 = uvs[uvc * 2];
          v3 = uvs[uvc * 2 + 1];

          scope.faceVertexUvs[0].push([
            new THREE.Vector2(u1, v1),
            new THREE.Vector2(u2, v2),
            new THREE.Vector2(u3, v3),
          ]);
        }
      }

      function init_uvs4(nElements, offset) {
        let i,
          uva,
          uvb,
          uvc,
          uvd,
          u1,
          u2,
          u3,
          u4,
          v1,
          v2,
          v3,
          v4;

        const uvIndexBuffer = new Uint32Array(data, offset, 4 * nElements);

        for (i = 0; i < nElements; i++) {
          uva = uvIndexBuffer[i * 4];
          uvb = uvIndexBuffer[i * 4 + 1];
          uvc = uvIndexBuffer[i * 4 + 2];
          uvd = uvIndexBuffer[i * 4 + 3];

          u1 = uvs[uva * 2];
          v1 = uvs[uva * 2 + 1];

          u2 = uvs[uvb * 2];
          v2 = uvs[uvb * 2 + 1];

          u3 = uvs[uvc * 2];
          v3 = uvs[uvc * 2 + 1];

          u4 = uvs[uvd * 2];
          v4 = uvs[uvd * 2 + 1];

          scope.faceVertexUvs[0].push([
            new THREE.Vector2(u1, v1),
            new THREE.Vector2(u2, v2),
            new THREE.Vector2(u4, v4),
          ]);

          scope.faceVertexUvs[0].push([
            new THREE.Vector2(u2, v2),
            new THREE.Vector2(u3, v3),
            new THREE.Vector2(u4, v4),
          ]);
        }
      }

      function init_faces3_flat(nElements, offsetVertices, offsetMaterials) {
        let i,
          a,
          b,
          c,
          m;

        const vertexIndexBuffer = new Uint32Array(data, offsetVertices, 3 * nElements);
        const materialIndexBuffer = new Uint16Array(data, offsetMaterials, nElements);

        for (i = 0; i < nElements; i++) {
          a = vertexIndexBuffer[i * 3];
          b = vertexIndexBuffer[i * 3 + 1];
          c = vertexIndexBuffer[i * 3 + 2];

          m = materialIndexBuffer[i];

          scope.faces.push(new THREE.Face3(a, b, c, null, null, m));
        }
      }

      function init_faces4_flat(nElements, offsetVertices, offsetMaterials) {
        let i,
          a,
          b,
          c,
          d,
          m;

        const vertexIndexBuffer = new Uint32Array(data, offsetVertices, 4 * nElements);
        const materialIndexBuffer = new Uint16Array(data, offsetMaterials, nElements);

        for (i = 0; i < nElements; i++) {
          a = vertexIndexBuffer[i * 4];
          b = vertexIndexBuffer[i * 4 + 1];
          c = vertexIndexBuffer[i * 4 + 2];
          d = vertexIndexBuffer[i * 4 + 3];

          m = materialIndexBuffer[i];

          scope.faces.push(new THREE.Face3(a, b, d, null, null, m));
          scope.faces.push(new THREE.Face3(b, c, d, null, null, m));
        }
      }

      function init_faces3_smooth(nElements, offsetVertices, offsetNormals, offsetMaterials) {
        let i,
          a,
          b,
          c,
          m;
        let na,
          nb,
          nc;

        const vertexIndexBuffer = new Uint32Array(data, offsetVertices, 3 * nElements);
        const normalIndexBuffer = new Uint32Array(data, offsetNormals, 3 * nElements);
        const materialIndexBuffer = new Uint16Array(data, offsetMaterials, nElements);

        for (i = 0; i < nElements; i++) {
          a = vertexIndexBuffer[i * 3];
          b = vertexIndexBuffer[i * 3 + 1];
          c = vertexIndexBuffer[i * 3 + 2];

          na = normalIndexBuffer[i * 3];
          nb = normalIndexBuffer[i * 3 + 1];
          nc = normalIndexBuffer[i * 3 + 2];

          m = materialIndexBuffer[i];

          let nax = normals[na * 3],
            nay = normals[na * 3 + 1],
            naz = normals[na * 3 + 2],

            nbx = normals[nb * 3],
            nby = normals[nb * 3 + 1],
            nbz = normals[nb * 3 + 2],

            ncx = normals[nc * 3],
            ncy = normals[nc * 3 + 1],
            ncz = normals[nc * 3 + 2];

          scope.faces.push(new THREE.Face3(a, b, c, [
            new THREE.Vector3(nax, nay, naz),
            new THREE.Vector3(nbx, nby, nbz),
            new THREE.Vector3(ncx, ncy, ncz),
          ], null, m));
        }
      }

      function init_faces4_smooth(nElements, offsetVertices, offsetNormals, offsetMaterials) {
        let i,
          a,
          b,
          c,
          d,
          m;
        let na,
          nb,
          nc,
          nd;

        const vertexIndexBuffer = new Uint32Array(data, offsetVertices, 4 * nElements);
        const normalIndexBuffer = new Uint32Array(data, offsetNormals, 4 * nElements);
        const materialIndexBuffer = new Uint16Array(data, offsetMaterials, nElements);

        for (i = 0; i < nElements; i++) {
          a = vertexIndexBuffer[i * 4];
          b = vertexIndexBuffer[i * 4 + 1];
          c = vertexIndexBuffer[i * 4 + 2];
          d = vertexIndexBuffer[i * 4 + 3];

          na = normalIndexBuffer[i * 4];
          nb = normalIndexBuffer[i * 4 + 1];
          nc = normalIndexBuffer[i * 4 + 2];
          nd = normalIndexBuffer[i * 4 + 3];

          m = materialIndexBuffer[i];

          let nax = normals[na * 3],
            nay = normals[na * 3 + 1],
            naz = normals[na * 3 + 2],

            nbx = normals[nb * 3],
            nby = normals[nb * 3 + 1],
            nbz = normals[nb * 3 + 2],

            ncx = normals[nc * 3],
            ncy = normals[nc * 3 + 1],
            ncz = normals[nc * 3 + 2],

            ndx = normals[nd * 3],
            ndy = normals[nd * 3 + 1],
            ndz = normals[nd * 3 + 2];

          scope.faces.push(new THREE.Face3(a, b, d, [
            new THREE.Vector3(nax, nay, naz),
            new THREE.Vector3(nbx, nby, nbz),
            new THREE.Vector3(ndx, ndy, ndz),
          ], null, m));

          scope.faces.push(new THREE.Face3(b, c, d, [
            new THREE.Vector3(nbx, nby, nbz),
            new THREE.Vector3(ncx, ncy, ncz),
            new THREE.Vector3(ndx, ndy, ndz),
          ], null, m));
        }
      }

      function init_triangles_flat(start) {
        const nElements = md.ntri_flat;

        if (nElements) {
          const offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
          init_faces3_flat(nElements, start, offsetMaterials);
        }
      }

      function init_triangles_flat_uv(start) {
        const nElements = md.ntri_flat_uv;

        if (nElements) {
          const offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
          const offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

          init_faces3_flat(nElements, start, offsetMaterials);
          init_uvs3(nElements, offsetUvs);
        }
      }

      function init_triangles_smooth(start) {
        const nElements = md.ntri_smooth;

        if (nElements) {
          const offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
          const offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

          init_faces3_smooth(nElements, start, offsetNormals, offsetMaterials);
        }
      }

      function init_triangles_smooth_uv(start) {
        const nElements = md.ntri_smooth_uv;

        if (nElements) {
          const offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
          const offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
          const offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

          init_faces3_smooth(nElements, start, offsetNormals, offsetMaterials);
          init_uvs3(nElements, offsetUvs);
        }
      }

      function init_quads_flat(start) {
        const nElements = md.nquad_flat;

        if (nElements) {
          const offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
          init_faces4_flat(nElements, start, offsetMaterials);
        }
      }

      function init_quads_flat_uv(start) {
        const nElements = md.nquad_flat_uv;

        if (nElements) {
          const offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
          const offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

          init_faces4_flat(nElements, start, offsetMaterials);
          init_uvs4(nElements, offsetUvs);
        }
      }

      function init_quads_smooth(start) {
        const nElements = md.nquad_smooth;

        if (nElements) {
          const offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
          const offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

          init_faces4_smooth(nElements, start, offsetNormals, offsetMaterials);
        }
      }

      function init_quads_smooth_uv(start) {
        const nElements = md.nquad_smooth_uv;

        if (nElements) {
          const offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
          const offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
          const offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

          init_faces4_smooth(nElements, start, offsetNormals, offsetMaterials);
          init_uvs4(nElements, offsetUvs);
        }
      }
    };

    Model.prototype = Object.create(THREE.Geometry.prototype);
    Model.prototype.constructor = Model;

    const geometry = new Model();
    const materials = THREE.Loader.prototype.initMaterials(jsonMaterials, texturePath, this.crossOrigin);

    callback(geometry, materials);
  }
}
